{"version":3,"sources":["components/AddForm.js","components/TodoList.js","components/TaskFilter.js","components/DateFilter.js","components/SortForm.js","App.js","index.js"],"names":["AddForm","state","text","showValidationError","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","trim","length","onAddTask","props","this","onSubmit","type","onChange","style","borderColor","color","Component","TodoList","tasks","onUpateCompleted","onDeleteTask","map","task","key","id","textDecoration","completed","date","checked","onClick","TaskFilter","filter","onChangeFilter","placeholder","DateFilter","startDate","Date","dateFormat","selected","React","SortForm","sortDirectionNameAsc","sortDirectionDateAsc","sort","sortingFinish","sortingStart","slice","a","b","nameA","toLowerCase","nameB","dateA","fulldate","dateB","sorting","filtered","onSort","sortDirectionChange","prevState","App","addTask","createdDate","getDate","getMonth","getFullYear","taskToAdd","shortid","generate","deleteTask","updateCompleted","changeFilter","newDateFromTask","newDateFromFilter","includes","sorted","persistedTasks","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3591fbb3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class AddForm extends Component {\n  static propTypes = {\n    onAddTask: PropTypes.func.isRequired,\n  };\n\n  state = {\n    text: \"\",\n    showValidationError: false,\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { text } = this.state;\n\n    if (text.trim().length === 0) {\n      this.setState({ showValidationError: true });\n    } else {\n      const { onAddTask } = this.props;\n      onAddTask({ text });\n\n      this.setState({\n        text: \"\",\n        showValidationError: false,\n      });\n    }\n  };\n\n  render() {\n    const { text, showValidationError } = this.state;\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"text\"\n            value={text}\n            onChange={this.handleChange}\n            style={{\n              borderColor: showValidationError ? \"red\" : \"blue\",\n            }}\n          />\n          <button type=\"submit\">Add Todo</button>\n          {showValidationError && (\n            <p style={{ color: \"red\" }}>Please, set a task!</p>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TodoList = ({ tasks, onUpateCompleted, onDeleteTask }) => (\n  <div>\n    <h1>Hello from TodoList</h1>\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <p\n              style={{\n                textDecoration: task.completed ? \"line-through\" : \"none\",\n              }}\n            >\n              {task.text}\n            </p>\n            <p>{task.date}</p>\n            <label>\n              Completed:\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => onUpateCompleted(task.id)}\n              />\n            </label>\n            <button type=\"button\" onClick={() => onDeleteTask(task.id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  </div>\n);\n\nTodoList.propTypes = {\n  onDeleteTask: PropTypes.func.isRequired,\n  onUpateCompleted: PropTypes.func.isRequired,\n  tasks: PropTypes.array.isRequired,\n};\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class TaskFilter extends Component {\n  static propTypes = {\n    onChangeFilter: PropTypes.func.isRequired,\n  };\n\n  state = {\n    filter: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      filter: e.target.value,\n    });\n    this.props.onChangeFilter(e.target.value);\n  };\n  render() {\n    const { filter } = this.state;\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={this.handleChange}\n          placeholder=\"Type to filter tasks...\"\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport PropTypes from \"prop-types\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// CSS Modules, react-datepicker-cssmodules.css\nimport \"react-datepicker/dist/react-datepicker-cssmodules.css\";\n\nexport default class DateFilter extends React.Component {\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n  };\n\n  state = {\n    startDate: new Date(),\n  };\n\n  handleChange = (date) => {\n    const { onChange } = this.props;\n    onChange(date);\n    this.setState({\n      startDate: date,\n    });\n  };\n\n  render() {\n    return (\n      <DatePicker\n        dateFormat=\"dd/MM/yyyy\"\n        selected={this.state.startDate}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class SortForm extends Component {\n  static propTypes = {\n    onSort: PropTypes.func.isRequired,\n    tasks: PropTypes.array.isRequired,\n    filtered: PropTypes.array.isRequired,\n  };\n\n  state = { sortDirectionNameAsc: true, sortDirectionDateAsc: true };\n\n  sort = (e) => {\n    let sort = e.target.name;\n    let tasks = this.props.tasks;\n    let sortingStart = [...this.props.filtered];\n    const sorting = (sortingStart, sort) => {\n      switch (sort) {\n        case \"nameAsc\":\n          return sortingStart.slice().sort((a, b) => {\n            const nameA = a.text.toLowerCase();\n            const nameB = b.text.toLowerCase();\n            if (nameA < nameB) return -1;\n            if (nameA > nameB) return 1;\n            return 0;\n          });\n        case \"nameDsc\":\n          return sortingStart.slice().sort((a, b) => {\n            const nameA = a.text.toLowerCase();\n            const nameB = b.text.toLowerCase();\n            if (nameA > nameB) return -1;\n            if (nameA < nameB) return 1;\n            return 0;\n          });\n        case \"dateAsc\":\n          return sortingStart.slice().sort((a, b) => {\n            const dateA = a.fulldate;\n            const dateB = b.fulldate;\n            return new Date(dateB) - new Date(dateA);\n          });\n        case \"dateDsc\":\n          return sortingStart.slice().sort((a, b) => {\n            const dateA = a.fulldate;\n            const dateB = b.fulldate;\n            return new Date(dateA) - new Date(dateB);\n          });\n        case \"sortClear\":\n          return tasks;\n        default:\n          return sortingStart;\n      }\n    };\n\n    const sortingFinish = sorting(sortingStart, sort);\n\n    return this.props.onSort(sortingFinish);\n  };\n\n  sortDirectionChange = (e) => {\n    const sort = e.target.name;\n    if (sort === \"nameAsc\" || sort === \"nameDsc\") {\n      this.setState((prevState) => ({\n        sortDirectionNameAsc: !prevState.sortDirectionNameAsc,\n      }));\n    } else if (sort === \"dateAsc\" || sort === \"dateDsc\") {\n      this.setState((prevState) => ({\n        sortDirectionDateAsc: !prevState.sortDirectionDateAsc,\n      }));\n    }\n  };\n\n  render() {\n    const { sortDirectionNameAsc, sortDirectionDateAsc } = this.state;\n    return (\n      <div onClick={this.sortDirectionChange}>\n        <button\n          type=\"button\"\n          name={sortDirectionNameAsc ? \"nameAsc\" : \"nameDsc\"}\n          onClick={this.sort}\n        >\n          {sortDirectionNameAsc ? \"A-Z\" : \"Z-A\"}\n        </button>\n        <button\n          type=\"button\"\n          name={sortDirectionDateAsc ? \"dateAsc\" : \"dateDsc\"}\n          onClick={this.sort}\n        >\n          {sortDirectionDateAsc ? \"New-Old\" : \"Old-New\"}\n        </button>\n        <button type=\"button\" name=\"sortClear\" onClick={this.sort}>\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport shortid from \"shortid\";\nimport React, { Component } from \"react\";\nimport AddForm from \"./components/AddForm\";\nimport TodoList from \"./components/TodoList\";\nimport TaskFilter from \"./components/TaskFilter\";\nimport DateFilter from \"./components/DateFilter\";\nimport SortForm from \"./components/SortForm\";\n\nexport default class App extends Component {\n  state = {\n    tasks: [],\n    filtered: [],\n  };\n\n  componentDidMount() {\n    const persistedTasks = localStorage.getItem(\"tasks\");\n\n    if (persistedTasks) {\n      const tasks = JSON.parse(persistedTasks);\n\n      this.setState({ tasks, filtered: tasks });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { tasks } = this.state;\n    if (prevState.tasks !== tasks) {\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      this.setState({ filtered: tasks });\n    }\n  }\n\n  // Добавление таски\n  addTask = (task) => {\n    const date = new Date();\n    const createdDate = `${date.getDate()}/${\n      date.getMonth() + 1\n    }/${date.getFullYear()}`;\n    const taskToAdd = {\n      ...task,\n      id: shortid.generate(),\n      date: createdDate,\n      fulldate: date,\n      completed: false,\n    };\n\n    this.setState((prevState) => ({\n      tasks: [taskToAdd, ...prevState.tasks],\n    }));\n  };\n\n  // Удаление таски\n  deleteTask = (id) => {\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.filter((task) => task.id !== id),\n    }));\n  };\n\n  // Изменение в зависимости выполнена или нет таска\n\n  updateCompleted = (id) => {\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      ),\n    }));\n  };\n\n  // Фильтрация (для фильтрации по дате использовал react-datepicker)\n\n  changeFilter = (filter) => {\n    const { tasks } = this.state;\n\n    let filtered;\n\n    if (typeof filter === \"object\") {\n      filtered = tasks.filter((task) => {\n        const newDateFromTask = new Date(task.fulldate);\n        const newDateFromFilter = new Date(filter);\n        const checkDateTask = `${newDateFromTask.getDate()}/${\n          newDateFromTask.getMonth() + 1\n        }/${newDateFromTask.getFullYear()}`;\n        const checkDateFilter = `${newDateFromFilter.getDate()}/${\n          newDateFromFilter.getMonth() + 1\n        }/${newDateFromFilter.getFullYear()}`;\n\n        return checkDateTask === checkDateFilter;\n      });\n    } else if (typeof filter === \"string\") {\n      filtered = tasks.filter((task) =>\n        task.text.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n\n    this.setState({\n      filtered,\n    });\n  };\n\n  // Сортировка\n\n  sort = (sorted) => {\n    return this.setState({ filtered: [...sorted] });\n  };\n\n  render() {\n    const { filtered, tasks } = this.state;\n\n    return (\n      <>\n        <AddForm onAddTask={this.addTask} />\n        <SortForm filtered={filtered} tasks={tasks} onSort={this.sort} />\n        <TaskFilter onChangeFilter={this.changeFilter} />\n        <DateFilter onChange={this.changeFilter} />\n        <TodoList\n          tasks={filtered}\n          onDeleteTask={this.deleteTask}\n          onUpateCompleted={this.updateCompleted}\n        />\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}